###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    output_type \"python/pydantic\"\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.70.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "knowledge_graph.baml": "client<llm> GPT4o {\n    provider \"openai\"\n    options {\n        model \"gpt-4o\"\n        api_key env.OPENAI_API_KEY\n        supports_streaming false\n    }\n}\n\nenum DataType {\n    INT @description(\"Integer type data\")\n    FLOAT @description(\"Floating point data\")\n    STR @description(\"Arbitrary string data\")\n    BOOL @description(\"Boolean type data\")\n}\n\nclass Attribute {\n    name string @description(\"Name of the attribute\")\n    value string @description(\"Value of the attribute. Note that the value has to EXACTLY match the data type\")\n    data_type DataType @description(\"The data type of the attribute value\")\n}\n\nclass EntityBase {\n    name string\n    type string\n}\n\n\nfunction ExtractEntityBases(chunk: string) -> EntityBase[] {\n    client GPT4o\n    prompt #\"####INSTRUCTIONS####\nYou are an expert in linguistics and have over 20+ years of experience applying linguistic research to real world engineering problems.\nYour task is to identify entities from a chunk of text that will be given to you, which will later be added to a knowledge graph that you will be maintaining.\n\nFor this task, an entity is defined as any distinct and contextually relevant concept, object or abstraction that:\n- Is Identifiable: Can be named, described or uniquely distinguished within the context.\n- Has Meaning or Significance: Carries meaning that is useful towards the purpose of understanding the given piece of information and building a high level overview of all the underlying concepts at play.\n- Is Relational: Can have relationships with other 'entities'.\n- Has Contextual Integrity: Exists as a distinct concept in the specific domain or textual context.\n\nEntities are also generally linguistically denoted by (but are not limited to) nouns and noun-phrases within a text. You MUST identify and extract all the entities from the chunk of text given to you, as well as determine what type of entity it is (like entity labels in Neo4j).\n\n####\n\nHere is the piece of text:\n{{ chunk }}\n\n####\n\n{{ ctx.output_format }}\n\"#\n}\n\n\nfunction ExtractEntityAttributes(entity: EntityBase, chunk: string) -> Attribute[]{\n    client GPT4o\n    prompt #\"####INSTRUCTIONS####\nYou are an expert in linguistics and have over 20+ years of experience applying linguistic research to real world engineering problems.\nYour task is to identify all the attributes of an entity that will be provided to you, from a given chunk of text.\n\nFor this task, an attribute is defined as a descriptive characteristic or qualifier that provides additional context about an entity but:\n- Cannot independently exist as a standalone concept within the domain.\n- Does not form a relationship with other entities.\n- Is contextually bound to its associated entity, enhancing its meaning or specificity.\n\nAttributes are also linguistically denoted by (but are not limited to) adjectives, and adjective phrases within a text. They are also generally strong quantified/qualified descriptors of their entities. Attributes also cannot be entire phrases and are generally primitive data types. If a string is required to denote the value of an attribute, it MUST be just one or two words.\n\nPlease note that all the extracted attributes MUST STRICTLY be from the given chunk of text only. If there are no attributes present for the given entity in the provided text, the output must correspondingly be blank (while following the structure provided).\n\n####\n\nHere is the entity that you need to find all the attributes for:\n{{ entity }}\n\nHere is the chunk of text in which the entity appears:\n{{ chunk }}\n\n####\n\n{{ ctx.output_format }}\n\"#\n}\n",
}

def get_baml_files():
    return file_map
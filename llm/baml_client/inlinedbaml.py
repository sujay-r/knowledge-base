###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    output_type \"python/pydantic\"\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.70.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "knowledge_graph.baml": "client<llm> GPT4o {\n    provider \"openai\"\n    options {\n        model \"gpt-4o\"\n        api_key env.OPENAI_API_KEY\n        supports_streaming false\n    }\n}\n\nenum DataType {\n    INT @description(\"Integer type data\")\n    FLOAT @description(\"Floating point data\")\n    STR @description(\"Arbitrary string data\")\n    BOOL @description(\"Boolean type data\")\n}\n\nclass Attribute {\n    name string @description(\"Name of the attribute. Please note that attributes cannot be relationships, they have to be individual qualities of the entity that the attribute belongs to.\")\n    value string @description(\"Value of the attribute\")\n    data_type DataType\n}\n\nclass Entity {\n    name string\n    type string\n    attributes Attribute[]\n}\n\nclass KGOutput {\n    entities Entity[]\n}\n\nfunction ExtractEntities(chunk: string) -> KGOutput {\n    client GPT4o\n    prompt #\"####INSTRUCTION####\nYou are an expert state of the art knowledge graph agent.\nYour task is to identify entities and their relationships from a given piece of text.\n \n####\n\nHere is the piece of text:\n{{ chunk }}\n\n####\n\n{{ ctx.output_format }}\n\"#\n}\n",
}

def get_baml_files():
    return file_map